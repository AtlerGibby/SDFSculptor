// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSDefineSDF

//#pragma kernel CSGenerateMesh

#pragma kernel CSGenerateMesh1
#pragma kernel CSBrushOverlap
#pragma kernel CSFaceCount
#pragma kernel CSGetVolume


static const float3 voxelVerticies[8] =
{
    float3(0,0,0),
    float3(1,0,0),
    float3(0,1,0),
    float3(1,1,0),

    float3(0,0,1),
    float3(1,0,1),
    float3(0,1,1),
    float3(1,1,1)
};

static const float3 voxelFaceChecks[6] =
{
    float3(0,0,-1),
    float3(0,0,1),
    float3(-1,0,0),
    float3(1,0,0),
    float3(0,-1,0),
    float3(0,1,0)
};

static const int voxelVertexIndex[6][4]  =
{
    {0,1,2,3},
    {4,5,6,7},
    {4,0,6,2},
    {5,1,7,3},
    {0,1,4,5},
    {2,3,6,7}
};

static const float2 voxelUVs[4] =
{
    float2(0,0),
    float2(0,1),
    float2(1,0),
    float2(1,1)
};

static const int voxelTris[6][6] =
{
    {0,2,3,0,3,1},
    {0,1,2,1,3,2},
    {0,2,3,0,3,1},
    {0,1,2,1,3,2},
    {0,1,2,1,3,2},
    {0,2,3,0,3,1}
};

struct BoxBrush
{
    float4x4 transform;
    float3 scale;
    float4 color;
    float blend;
    int brushType;
};

struct SphereBrush
{
    float3 position;
    float scale;
    float4 color;
    float blend;
    int brushType;
};

struct Brush
{
    float4x4 transform;
    float3 position;
    float3 scale;
    float4 color;
    float roundA;
    float roundB;
    float noiseAmount;
    float noiseStrength;
    int textureNoise;
    float blend;
    float3 curveA;
    float3 curveB;
    float3 bounds;
    int brushType;
    int brushShape;
};

//float4x4[] bbTransforms;


RWTexture2D<float4> Result;

RWTexture3D<float4> Result16;
RWTexture3D<float4> Result64;
RWTexture3D<float4> Result256;
RWTexture3D<float4> ResultColor;

RWTexture2D<float4> overlap;

StructuredBuffer<Brush> edits;

RWStructuredBuffer<uint> faceCounter;
RWStructuredBuffer<uint> counter;
RWStructuredBuffer<uint> iterCounter;
//RWStructuredBuffer<uint> testCounter;

RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> triangleBuffer;
RWStructuredBuffer<float2> uvBuffer;
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<float4> colorBuffer;

Texture2D<float4> noiseTexture;

int minMeshGenData;
int maxMeshGenData;
int Resolution;
float scale;
float baseMarginOfError;
float blendMarginOfError;

float sculptToTextureBlur;
int infoType;

int onlyFacingCam;
int lowQualityDualContouring;
int shareVerticies;
int renderColors;
float4 CamForward;
float4 origin;


float4x4 inverse(float4x4 m) 
{
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}

float4 lerpColor (float4 c1, float4 c2, float b)
{
    return c1 * (1 - b) + c2 * b;
}

float lerpFloat (float f1, float f2, float b)
{
    return f1 * (1 - b) + f2 * b;
}

float2 lerpFloat2 (float2 f1, float2 f2, float2 b)
{
    return f1 * (1 - b) + f2 * b;
}

// SDF Brushes / Shapes
// SDF functions originally made by Inigo Quilez and others on Shadertoy.
// You can add other functions as well.

//  Box = 1
float SDFBox (float3 wp, float4x4 t, float3 scale)
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float3 q = abs(p) - scale/2;
    return length(max(q, 0)) + min(max(q.x, max(q.y,q.z)), 0);
}

//  Sphere = 0
float SDFSphere (float3 wp, float3 t, float scale)
{
    return length(wp - t) - scale/2;
}

//  Cylinder = 2
float SDFCylinder(float3 wp, float4x4 t, float h, float r )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float3 a = float3(0, h/2, 0);
    float3 b = float3(0, -h/2, 0);
    float3  ba = b - a;
    float3  pa = p - a;
    float baba = dot(ba,ba);
    float paba = dot(pa,ba);
    float x = length(pa*baba-ba*paba) - r*baba;
    float y = abs(paba-baba*0.5)-baba*0.5;
    float x2 = x*x;
    float y2 = y*y*baba;
    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));
    return sign(d)*sqrt(abs(d))/baba;
}

//  Cone = 3
float SDFCone(float3 wp, float4x4 t, float2 c, float h )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float q = length(p.xz);
    return max(dot(c.xy, float2(q,p.y)),-h-p.y);
}

float SDFCone(float3 wp, float4x4 t, float baseRadius, float h, float roundVal)
{   
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz - float3(0,h/2,0);  
    float2 q = h*float2(baseRadius/2,-1.0);
    
    float2 w = float2( length(p.xz), p.y );
    float2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );
    float2 b = w - q*float2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );
    float k = sign( q.y );
    float d = min(dot( a, a ),dot(b, b));
    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );
    return sqrt(d)*sign(s) - roundVal;
}

//  Torus = 4
float SDFTorus(float3 wp, float4x4 t, float2 t2 )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float2 q = float2(length(p.xz)-t2.x, p.y);
    return length(q) - t2.y;
}

//  Ellipsoid = 5
float SDFEllipsoid(float3 wp, float4x4 t, float3 scale )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float k0 = length(p/(scale/2));
    float k1 = length(p/((scale/2)*(scale/2)));
    return k0*(k0-1.0)/k1;
}

//  RoundedBox = 6
float SDFRoundBox(float3 wp, float4x4 t, float3 scale, float r)
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float3 q = abs(p) - scale/2;
    return length(max(q, 0)) + min(max(q.x, max(q.y,q.z)), 0) - r;
}

//  RoundedCylinder = 7
float SDFRoundCylinder(float3 wp, float4x4 t, float ra, float rb, float h )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float2 d = float2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );
    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;
}

//  RoundedCone = 8
float SDFRoundCone(float3 wp, float4x4 t, float r1, float r2, float h )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    // sampling independent computations (only depend on shape)
    float b = (r1-r2)/h;
    float a = sqrt(1.0-b*b);

    // sampling dependant computations
    float2 q = float2( length(p.xz), p.y );
    float k = dot(q,float2(-b,a));
    if( k<0.0 ) return length(q) - r1;
    if( k>a*h ) return length(q-float2(0.0,h)) - r2;
    return dot(q, float2(a,b) ) - r1;
}

//  TriangularPrism = 9
float SDFTriPrism(float3 wp, float4x4 t, float3 scale, float roundVal) 
{
    float halfWidth = scale.x/2;
    float halfHeight = scale.y/2;
    float halfDepth = scale.z/2;

    float3 position = (mul(inverse(t), float4(wp, 1))).xyz;
    position.x = abs(position.x);
    position.xy -= float2(halfWidth, -halfHeight);
    float2 end = float2(-halfWidth, halfHeight * 2.0);
    float2 segment = position.xy - end * clamp(dot(position.xy, end) / dot(end, end), 0.0, 1.0);
    float d1 = length(segment);
    if (max(segment.x, segment.y) < 0.0) {
        d1 = -min(d1, position.y);
    }
    float d2 = abs(position.z) - halfDepth;

    return length(max(float2(d1, d2), 0.0)) + min(max(d1, d2), 0.0) - roundVal;
}

//  HexagonalPrism = 10
float SDFHexPrism(float3 wp, float4x4 t, float3 scale, float roundVal)
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    const float3 k = float3(-0.8660254, 0.5, 0.57735);
    p = abs(p);
    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;
    float2 d = float2(
         length(p.xy-float2(clamp(p.x,-k.z*scale.x,k.z*scale.x), scale.x))*sign(p.y-scale.x),
         p.z-scale.z );
    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - roundVal;
}

//  Pyramid = 11
float SDFPyramid(float3 wp, float4x4 transform, float3 scale, float roundVal) 
{
    float3 position = (mul(inverse(transform), float4(wp, 1))).xyz;
    position.xz = abs(position.xz);

    float halfWidth = scale.x;
    float halfDepth = scale.z;
    float halfHeight = scale.y;
    
    // bottom
    float s1 = abs(position.y) - halfHeight;
    float3 base = float3(max(position.x - halfWidth, 0.0), abs(position.y + halfHeight), max(position.z - halfDepth, 0.0));
    float d1 = dot(base, base);
   
    float3 q = position - float3(halfWidth, -halfHeight, halfDepth);
    float3 end = float3(-halfWidth, 2.0 * halfHeight, -halfDepth);
    float3 segment = q - end * clamp(dot(q, end) / dot(end, end), 0.0, 1.0);
    float d = dot(segment, segment);
   
    // side
    float3 normal1 = float3(end.y, -end.x, 0.0);
    float s2 = dot(q.xy, normal1.xy);
    float d2 = d;
    if (dot(q.xy, -end.xy) < 0.0 && dot(q, cross(normal1, end)) < 0.0) { 
        d2 = s2 * s2 / dot(normal1.xy, normal1.xy);
    }
    // front/back
    float3 normal2 = float3(0.0, -end.z, end.y);
    float s3 = dot(q.yz, normal2.yz);
    float d3 = d;
    if (dot(q.yz, -end.yz) < 0.0 && dot(q, cross(normal2, -end)) < 0.0) { 
        d3 = s3 * s3 / dot(normal2.yz, normal2.yz);
    }
    return (sqrt(min(min(d1, d2), d3)) * sign(max(max(s1, s2), s3))) - roundVal;
}



//  link = 12
float SDFLink(float3 wp, float4x4 t, float le, float r1, float r2 )
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float3 q = float3( p.x, max(abs(p.y)-le,0.0), p.z );
    return length(float2(length(q.xy)-r1,q.z)) - r2;
}

float3 lerpFloat3 (float3 f1, float3 f2, float b)
{
    return f1 * (1 - b) + f2 * b;
}

float acosh (float x)
{
    return log(x + sqrt(x * x - 1.0f));
}

float asinh (float x)
{
    return log(x + sqrt(x * x + 1.0f));
}

float sinh (float x)
{
    return 0.5f * (exp(x) - exp(-x));
}

//  BezierCurve = 13
float det( float2 a, float2 b ) { return a.x*b.y-b.x*a.y; }

float3 getClosest( float2 b0, float2 b1, float2 b2 ) 
{
    float a =     det(b0,b2);
    float b = 2.0*det(b1,b0);
    float d = 2.0*det(b2,b1);
    float f = b*d - a*a;
    float2  d21 = b2-b1;
    float2  d10 = b1-b0;
    float2  d20 = b2-b0;
    float2  gf = 2.0*(b*d21+d*d10+a*d20); gf = float2(gf.y,-gf.x);
    float2  pp = -f*gf/dot(gf,gf);
    float2  d0p = b0-pp;
    float ap = det(d0p,d20);
    float bp = 2.0*det(d10,d0p);
    float t = clamp( (ap+bp)/(2.0*a+b+d), 0.0 ,1.0 );
    return float3( lerpFloat2(lerpFloat2(b0,b1,t), lerpFloat2(b1,b2,t),t), t );
}

// SDF Operations
float Union( float valueA, float valueB, float lerp ) 
{
    float h = clamp( 0.5f + 0.5f * (valueB - valueA) / lerp, 0.0f, 1.0f );
    return  (valueB * (1 - h) + valueA * h) - lerp * h * (1.0f - h); //lerpFloat(valueB, valueA, lerp) - lerp*h*(1.0-h);
}

float SDFBezier(float3 wp, float4x4 t, float3 aX, float3 bX, float3 cX, float2 scale)
{
    float3 p = (mul(inverse(t), float4(wp, 1))).xyz;
    float3 a = (mul(inverse(t), float4(aX, 1))).xyz;
    float3 b = (mul(inverse(t), float4(bX, 1))).xyz;
    float3 c = (mul(inverse(t), float4(cX, 1))).xyz;
	float3 w = normalize( cross( c-b, a-b ) );
	float3 u = normalize( c-b );
	float3 v = normalize( cross( w, u ) );

	float2 a2 = float2( dot(a-b,u), dot(a-b,v) );
	float2 b2 = float2( 0,0 );
	float2 c2 = float2( dot(c-b,u), dot(c-b,v) );
	float3 p3 = float3( dot(p-b,u), dot(p-b,v), dot(p-b,w) );

	float3 cp = getClosest( a2-p3.xy, b2-p3.xy, c2-p3.xy );

	float2 bCurve = float2( sqrt(dot(cp.xy,cp.xy)+p3.z*p3.z), cp.z );
    float tr = scale.x - scale.y*bCurve.y;
    return bCurve.x - tr;
}

float4 UnionColor( float valueA, float valueB, float4 colorA, float4 colorB, float lerp ) 
{
    float h = clamp( 0.5f + 0.5f * (valueB - valueA) / lerp, 0.0f, 1.0f );
    return lerpColor(colorA, colorB, h);

    //float h = max(lerp - abs(valueA - valueB), 0);
    //return min(colorA,colorB) - h * h * 0.25f / lerp;
}

float4 SubtractionColor( float valueA, float valueB, float4 colorA, float4 colorB, float lerp ) 
{
    //float h = clamp( 0.5f + 0.5f * (valueB - valueA) / lerp, 0.0f, 1.0f );
    //return lerpColor(colorA, colorB, h);

    //float h = max(lerp - abs(valueA - valueB), 0);
    //return min(colorA,colorB) - h * h * 0.25f / lerp;

    //return -UnionColor(-valueA,valueB,colorA,colorB,lerp);

    float h = clamp( 0.5f + 0.5f * (valueB + valueA) / lerp, 0.0f, 1.0f );
    return lerpColor(colorA, colorB, clamp(h,0,1));
}

float Subtraction( float valueA, float valueB, float lerp ) 
{
    //float h = clamp( 0.5f - 0.5f * (valueB+valueA)/lerp, 0.0f, 1.0f );
    //return  (valueB * (1 - h) + valueA * -1 * h) + lerp * h * (1.0f - h); //lerpFloat(valueB, -valueA, lerp) + lerp*h*(1.0-h);
    //return max(valueA, -valueB);
    //float h = clamp( 0.5f - 0.5f * (valueB + valueA) / lerp, 0.0f, 1.0f );
    //return (valueB * (1 - h) + valueA * -1 * h) + lerp * h * (1.0f - h);
    return -Union(-valueA,valueB,lerp);
}

float InvertedIntersection( float valueA, float valueB, float lerp ) 
{
    float h = clamp( 0.5f - 0.5f * (valueB+valueA)/lerp, 0.0f, 1.0f );
    return (valueB * (1 - h) + valueA * -1 * h) + lerp * h * (1.0f - h); 
}

float Intersection( float valueA, float valueB, float lerp ) 
{
    //float h = clamp( 0.5f - 0.5f * (valueB-valueA) / lerp, 0.0f, 1.0f );
    //return (valueB * (1 - h) + valueA * h) + lerp * h * (1.0f - h); 
    return -Union(-valueA,-valueB,lerp);
}


float Noise (float3 pos, float amount, float strength)
{
    return sin(amount*pos.x) * sin(amount*pos.y) * sin(amount*pos.z) * strength;
}

float2 NoiseGradient(float2 intPos, float t)
{
    float rand = noiseTexture[intPos].r;
    float angle = 6.283185f * rand + 4.0f * t * rand;
    return float2(cos(angle), sin(angle));
}


float TextureNoise (float3 pos, float amount, float strength)
{
    pos *= (amount / 2);
    float2 i = floor(pos.xy);
    float2 f = pos.xy - i;
    float2 blend = f * f * (3.0 - 2.0 * f);
    float noiseVal = 
        lerpFloat(
            lerpFloat(
                dot(NoiseGradient(i + float2(0, 0), pos.z), f - float2(0, 0)),
                dot(NoiseGradient(i + float2(1, 0), pos.z), f - float2(1, 0)),
                blend.x),
            lerpFloat(
                dot(NoiseGradient(i + float2(0, 1), pos.z), f - float2(0, 1)),
                dot(NoiseGradient(i + float2(1, 1), pos.z), f - float2(1, 1)),
                blend.x),
        blend.y
    );
    return (noiseVal / 0.7f) * strength; // normalize to about [-1..1]
}

//If adding custom shapes, diable other shapes to reduce compile times for testing.
//Compiling all shapes takes a long time and adding more shapes will make it take longer.
//You would need to set the environment variable: UNITY_SHADER_COMPILER_TASK_TIMEOUT_MINUTES to something bigger if timing out error occurs.
//Technically, the SDF Spher/Box/Cylinder are redundant but they are here for the sake of completeness.
float GetSDFResult (float3 querryPos, int i)
{
    float result = 1;
    if(edits[i].brushShape == 0)
        result = SDFSphere(querryPos, edits[i].position, edits[i].scale.x);
    else if(edits[i].brushShape == 1)
        result = SDFBox(querryPos, edits[i].transform, edits[i].scale);
    else if(edits[i].brushShape == 2)
        result = SDFCylinder(querryPos, edits[i].transform, edits[i].scale.y, edits[i].scale.x);
    else if(edits[i].brushShape == 3)
        result = SDFCone(querryPos, edits[i].transform, edits[i].scale.x, edits[i].scale.y, edits[i].roundA );
    else if(edits[i].brushShape == 4)
        result = SDFTorus(querryPos, edits[i].transform, float2(edits[i].roundA, edits[i].roundB));
    else if(edits[i].brushShape == 5)
        result = SDFEllipsoid(querryPos, edits[i].transform, edits[i].scale );
    else if(edits[i].brushShape == 6)
        result = SDFRoundBox(querryPos, edits[i].transform,  edits[i].scale, edits[i].roundA);
    else if(edits[i].brushShape == 7)
        result = SDFRoundCylinder(querryPos, edits[i].transform, edits[i].roundB, edits[i].roundA, edits[i].scale.y/2 - edits[i].roundA);
    else if(edits[i].brushShape == 8)
        result = SDFRoundCone(querryPos, edits[i].transform, edits[i].roundA, edits[i].roundB, edits[i].scale.y/1.5f);
    else if(edits[i].brushShape == 9)
        result = SDFTriPrism(querryPos, edits[i].transform, edits[i].scale, edits[i].roundA);
    else if(edits[i].brushShape == 10)
        result = SDFHexPrism(querryPos, edits[i].transform, float3(min(edits[i].scale.x, edits[i].scale.y)/2.3f , 1, edits[i].scale.z/2), edits[i].roundA);
    else if(edits[i].brushShape == 11)
        result = SDFPyramid(querryPos, edits[i].transform, edits[i].scale/2, edits[i].roundA);
    else if(edits[i].brushShape == 12)
        result = SDFLink(querryPos, edits[i].transform, edits[i].roundA, edits[i].roundB, edits[i].scale.z/2);
    else if(edits[i].brushShape == 13)
        result = SDFBezier(querryPos, edits[i].transform, edits[i].curveA, edits[i].position, edits[i].curveB, float2(edits[i].roundA, edits[i].roundB));
    return result;
}


// Sign Distance Field Testing functions

float GetSDFDistance (float3 querryPos, float3 voxel)
{
    float output = 0;
    float sdfResult = 0;
    float4 sdfData = Result256[voxel];
    int firstEdit = 0;

    int cur = 0;
    int i = 0;
    int initialBlend = 0;
    for (cur = 0; cur < (int)(edits.Length); cur++)
    {
        i = cur;

        if(cur == 0)
            initialBlend += 1;
      
        if(overlap[int2(i, (int)(sdfData.g))].r < 1)
            continue;

        sdfResult = GetSDFResult(querryPos, i);

        if(edits[i].noiseAmount > 0 && edits[i].noiseStrength > 0)
        {
            if(edits[i].textureNoise > 0)
                sdfResult += TextureNoise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
            else
                sdfResult += Noise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
        }

        if(firstEdit == 0)
        {
            if(edits[i].brushType == 0)
            {
                output = sdfResult;
                firstEdit = 1;
            }
        }
        else
        {
            if(edits[i].brushType == 0)
                output = Union(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 1)
                output = Subtraction(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 2)
                output = InvertedIntersection(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 3)
                output = Intersection(output, sdfResult, edits[i].blend + initialBlend);
        }

        initialBlend = 0;

    }


    return output;
}

float4 GetSDFDistanceAndOverlap (float3 querryPos)
{
    float previousOutput = 9999;
    float output = 99999;
    float sdfResult = 99999;

    float4 sdfData = float4(0,0,0,0);

    int firstEdit = 0;
    int i = 0;
    int j = 0;
    int g = -1;
    int b = 9999;
    int a = 9999;
    int initialBlend = 0;

    for (i = 0; i < (int)(edits.Length); i++)
    {
        previousOutput = output;
        sdfResult = GetSDFResult(querryPos, i);

        if(i == 0)
            initialBlend += 1;
        
        if(edits[i].noiseAmount > 0 && edits[i].noiseStrength > 0)
        {
            if(edits[i].textureNoise > 0)
                sdfResult += TextureNoise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
            else
                sdfResult += Noise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
        }

        if(firstEdit == 0)
        {
            if(edits[i].brushType == 0)
            {
                output = sdfResult;
                firstEdit = 1;
            }
        }
        else
        {
            if(edits[i].brushType == 0)
                output = Union(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 1)
                output = Subtraction(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 2)
                output = InvertedIntersection(output, sdfResult, edits[i].blend + initialBlend);
            if(edits[i].brushType == 3)
                output = Intersection(output, sdfResult, edits[i].blend + initialBlend);
        }

        initialBlend = 0;
    }

    initialBlend = 0;

    if(output <= 0.5f)
    {
        for (i = 0; i < (int)(edits.Length); i++)
        {

            if(i == 0)
                initialBlend += 1;

            sdfResult = GetSDFResult(querryPos, i);

            if(edits[i].noiseAmount > 0 && edits[i].noiseStrength > 0)
            {
                if(edits[i].textureNoise > 0)
                    sdfResult += TextureNoise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
                else
                    sdfResult += Noise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
            }

            if(sdfResult <= (edits[i].blend + initialBlend) && sdfResult <= b)
            {
                g = i;
                b = sdfResult;
            }

            initialBlend = 0;
        }
    }

    sdfData.g = g;//1.0f/(g + 1);
    sdfData.b = b;

    sdfData.r = output;
    //sdfData = float4(output,g,b,a);
    return sdfData;
}

void FillOverlapBuffer (float3 voxel)
{
    float4 sdfData = Result256[voxel];
    int cur = 0;
    int i = 0;

    for (cur = 0; cur < (int)(edits.Length); cur++)
    {
        i = cur;
        overlap[int2(i, (int)(sdfData.g))] = float4(1,1,1,1);

    }
}


float4 GetSDFColor (float3 querryPos, float3 voxel)
{
    float output = 9999999;
    float4 outputColor = float4(0,0,0,1);
    int bIndex = 0;
    int sIndex = 0;
    float sdfResult = 0;

    //float3 voxel = round((querryPos * (Resolution / scale)) - float3(0.5f, 0.5f, 0.5f));
    float4 sdfData = Result256[voxel];

    int cur = 0;
    int i = 0;
    for (cur = 0; cur < (int)(edits.Length); cur++)
    {

        i = cur;

        if(overlap[int2(i, (int)(sdfData.g))].r < 1)
            continue;

        sdfResult = GetSDFResult(querryPos, i);

        if(edits[i].noiseAmount > 0 && edits[i].noiseStrength > 0)
        {
            if(edits[i].textureNoise > 0)
                sdfResult += TextureNoise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
            else
                sdfResult += Noise(querryPos, edits[i].noiseAmount, edits[i].noiseStrength);
        }

        if(edits[i].brushType == 0){
            outputColor = SubtractionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            outputColor = UnionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            output = Union(output, sdfResult, edits[i].blend); }
        if(edits[i].brushType == 1){
            outputColor = SubtractionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            output = Subtraction(output, sdfResult, edits[i].blend);
            outputColor = UnionColor(output, sdfResult - 0.01f, edits[i].color, outputColor, edits[i].blend);
            output = Union(output, sdfResult - 0.01f, edits[i].blend); }
        if(edits[i].brushType == 2){
            outputColor = SubtractionColor(output, sdfResult, outputColor, edits[i].color, edits[i].blend);
            output = InvertedIntersection(output, sdfResult, edits[i].blend); }
        if(edits[i].brushType == 3){
            outputColor = UnionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            output = Intersection(output, sdfResult, edits[i].blend); }
        if(edits[i].brushType == 4){
            outputColor = SubtractionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            outputColor = UnionColor(output, sdfResult, edits[i].color, outputColor, edits[i].blend);
            output = Union(output, sdfResult, edits[i].blend); }

    }

    return outputColor;
}

float3 GetSDFGradient (float3 querryPos, float3 voxel)
{
    float eps = 0.01f;
    return normalize(float3(   
        GetSDFDistance(querryPos + float3(eps, 0, 0), voxel) - GetSDFDistance(querryPos - float3(eps, 0, 0), voxel),
        GetSDFDistance(querryPos + float3(0, eps, 0), voxel) - GetSDFDistance(querryPos - float3(0, eps, 0), voxel),
        GetSDFDistance(querryPos + float3(0, 0, eps), voxel) - GetSDFDistance(querryPos - float3(0, 0, eps), voxel)
    ));
}

//Define all points in a 3d texture where there is and isn't something to render.
[numthreads(8,8,8)]
void CSDefineSDF (uint3 id : SV_DispatchThreadID)
{
    int xOld = 0;

    float3 worldpos = ((float3(id.xyz) + float3(0.5f, 0.5f, 0.5f)) / Resolution * scale) + (origin.xyz - (float3(1,1,1) * (scale/2)));
    float4 sdfData = GetSDFDistanceAndOverlap(worldpos);
    float sdfDist = sdfData.r;//GetSDFDistance(worldpos);

    if(sdfDist <= 0)
    {
        sdfData.r = 1;
        Result256[id.xyz] = sdfData;
        if(Result256[id.xyz].r > 0)// || Result256[id.xyz].g > 0 || Result256[id.xyz].b > 0 || Result256[id.xyz].a > 0)
        {
            counter.IncrementCounter();
            InterlockedAdd(counter[0], 1, xOld);
        }

    }
    else
    {
        sdfData.r = 0;
        Result256[id.xyz] = sdfData;
    }
}

//Count how many faces are needed to build a mesh out of the SDF.
[numthreads(8,8,8)]
void CSFaceCount (uint3 id : SV_DispatchThreadID)
{
    uint xOld = 0;

    if(Result256[id.xyz].r > 0)
    {
        int k = 0;
        for (k = 0; k < 6; k++)
        {
            if(onlyFacingCam == 1)
            {
                if(dot(voxelFaceChecks[k], CamForward.xyz) > 0)
                    continue;
            }
            if(float3(id.xyz).x + voxelFaceChecks[k].x >= Resolution || float3(id.xyz).y + voxelFaceChecks[k].y >= Resolution || float3(id.xyz).z + voxelFaceChecks[k].z >= Resolution &&
            float3(id.xyz).x + voxelFaceChecks[k].x < 0 || float3(id.xyz).y + voxelFaceChecks[k].y < 0 || float3(id.xyz).z + voxelFaceChecks[k].z < 0)
            {
                continue;
            }
            else if(Result256[float3(id.xyz) + voxelFaceChecks[k]].r > 0)// || Result256[float3(id.xyz) + voxelFaceChecks[k]].r == -1)
            {
                continue;
            }
            faceCounter.IncrementCounter();
            InterlockedAdd(faceCounter[0], 1, xOld);

        }
    }
}

//Calculate all mesh data: vertex positions, vertex colors, normals, etc.
void CalcStuff (float3 worldpos)
{
    float3 faceVerticies[4];
    float2 faceUVs[4];
    uint vertCount = 0;
    uint iterCount = 0;
    
    int k = 0;
    for (k = 0; k < 6; k++)
    {
        if(onlyFacingCam == 1)
        {
            if(dot(voxelFaceChecks[k], CamForward.xyz) > 0)
                continue;
        }
        if(worldpos.x + voxelFaceChecks[k].x >= Resolution || worldpos.y + voxelFaceChecks[k].y >= Resolution || worldpos.z + voxelFaceChecks[k].z >= Resolution &&
        worldpos.x + voxelFaceChecks[k].x < 0 || worldpos.y + voxelFaceChecks[k].y < 0 || worldpos.z + voxelFaceChecks[k].z < 0)
        {
            continue;
        }
        else if(Result256[worldpos + voxelFaceChecks[k]].r > 0)// || Result256[worldpos + voxelFaceChecks[k]].r == -1)
        {
            continue;
        }

        counter.IncrementCounter();
        InterlockedAdd(counter[0], 1, vertCount);

        //if(vertCount < minMeshGenData)
        //    continue;

        if(vertCount >= (uint)maxMeshGenData)
            return;


        int l = 0;
        for (l = 0; l < 4; l++)
        {
            faceVerticies[l] = voxelVerticies[voxelVertexIndex[k][l]];

            faceVerticies[l] /= (Resolution);
            faceVerticies[l] *= scale;
            faceVerticies[l] += ((worldpos / (Resolution)) * scale);
            faceVerticies[l] += (origin.xyz - float3(scale/2, scale/2, scale/2));

            faceUVs[l] = voxelUVs[l];
        }
        l = 0;
        //vertCount -= 1;
        float3 gradient = float3(0,0,0);
        for (l = 0; l < 6; l++)
        {
            vertexBuffer[vertCount * 6 + l] = faceVerticies[voxelTris[k][l]];
            uvBuffer[vertCount * 6 + l] = faceUVs[voxelTris[k][l]];
            triangleBuffer[vertCount * 6 + l] = vertCount * 6 + l;

            //normalBuffer[vertCount * 6 + l] = float3(0,0,0);
            //colorBuffer[vertCount * 6 + l] = float4(0,1,0,1);

            if(shareVerticies == 1)
            {
                gradient = GetSDFGradient(vertexBuffer[vertCount * 6 + l], worldpos);
                vertexBuffer[vertCount * 6 + l] -= gradient * GetSDFDistance(vertexBuffer[vertCount * 6 + l], worldpos);
                if(lowQualityDualContouring == 0)
                {
                    vertexBuffer[vertCount * 6 + l] -= gradient * GetSDFDistance(vertexBuffer[vertCount * 6 + l], worldpos);
                    vertexBuffer[vertCount * 6 + l] -= gradient * GetSDFDistance(vertexBuffer[vertCount * 6 + l], worldpos);
                    gradient = GetSDFGradient(vertexBuffer[vertCount * 6 + l], worldpos);
                }
                normalBuffer[vertCount * 6 + l] = gradient;
            }

            if(renderColors == 1)
                colorBuffer[vertCount * 6 + l] = GetSDFColor(vertexBuffer[vertCount * 6 + l], worldpos);
            else
                colorBuffer[vertCount * 6 + l] = float4(1,1,1,1);

            //vertexBuffer[vertCount * 6 + l] -= float3(0,0,20);
            //vertexBuffer[vertCount * 6 + l] += (origin - (float3(1,1,1) * (scale/2)));
        }
    }
}

/*
[numthreads(8,8,8)]
void CSGenerateMesh (uint3 id : SV_DispatchThreadID)
{

    float3 worldpos = Result256[id.xyz];//.r;
    uint xOld = 0;
    if(Result256[id.xyz].r > 0)
    {
        worldpos = id.xyz;
        //CalcStuff(worldpos);
    }

}*/

//Generate the mesh: creates all the data to build a mesh back in MeshGenerator.cs
[numthreads(4,4,4)]
void CSGenerateMesh1 (uint3 id : SV_DispatchThreadID)
{
    int3 sid = (int3)id;
    if(sid.x < Resolution && sid.y < Resolution && sid.z < Resolution)
    {
        float3 worldpos = id.xyz;
        if(Result256[id.xyz].r > 0)
        {
            //worldpos = id.xyz;
            CalcStuff(worldpos);
        }
    }
    else
    {
        return;
    }
}

// Convert the SDF Sculpt into a 3D Texture
[numthreads(8,8,8)]
void CSGetVolume (uint3 id : SV_DispatchThreadID)
{
    float3 worldpos = id.xyz;
    
    float3 newworldpos = ((float3(id.xyz) + float3(0.5f, 0.5f, 0.5f)) / Resolution * scale) + (origin.xyz - (float3(1,1,1) * (scale/2)));//worldpos / Resolution;

    FillOverlapBuffer(id.xyz);
    float distance = GetSDFDistance(newworldpos, worldpos);
    float4 color = float4(1,1,1,1);
    
    if(infoType == 0)
        color = GetSDFColor(newworldpos, worldpos);

    if(infoType == 1)
        color.rgb = GetSDFGradient(newworldpos, worldpos);
    
    if(infoType == 2)
    {
        color.rgb = 1 - abs(distance/(scale/2));
    }

    if(distance > -0.01f)
        color.a = 0;
    else
        color.a = 1;
    color.a = min( color.a , max(0, min(1, distance / sculptToTextureBlur)) );

    ResultColor[id.xyz] = color;
}


//Determine which brushes / shapes overlap with others, for the purpose of optimizing mesh generation.
[numthreads(8,8,1)]
void CSBrushOverlap (uint3 id : SV_DispatchThreadID)
{
    //int i = 0;
    //for (i = 0; i < edits.Length; i++)
    //{

    overlap[id.xy] = float4(0,1,0,1);

    if(id.x == id.y)
    {
        overlap[id.xy] = float4(1,1,1,1);
    }
    else
    {
        float3 min1 = edits[(int)id.x].position - (edits[(int)id.x].bounds*(1.0f + baseMarginOfError) + edits[(int)id.x].blend * (1.0f + blendMarginOfError));
        float3 max1 = edits[(int)id.x].position + (edits[(int)id.x].bounds*(1.0f + baseMarginOfError) + edits[(int)id.x].blend * (1.0f + blendMarginOfError));
        float3 min2 = edits[(int)id.y].position - (edits[(int)id.y].bounds*(1.0f + baseMarginOfError) + edits[(int)id.y].blend * (1.0f + blendMarginOfError));
        float3 max2 = edits[(int)id.y].position + (edits[(int)id.y].bounds*(1.0f + baseMarginOfError) + edits[(int)id.y].blend * (1.0f + blendMarginOfError));

        if(edits[(int)id.x].brushShape == 3 || edits[(int)id.x].brushShape == 6 || edits[(int)id.x].brushShape == 9 ||
        edits[(int)id.x].brushShape == 10 || edits[(int)id.x].brushShape == 11)
        {
            min1 -= edits[(int)id.x].roundA;
            max1 += edits[(int)id.x].roundA;
        }
        if(edits[(int)id.y].brushShape == 3 || edits[(int)id.y].brushShape == 6 || edits[(int)id.y].brushShape == 9 ||
        edits[(int)id.y].brushShape == 10 || edits[(int)id.y].brushShape == 11)
        {
            min2 -= edits[(int)id.y].roundA;
            max2 += edits[(int)id.y].roundA;
        }

        if(min1.x <= max2.x && max1.x >= min2.x
        && min1.y <= max2.y && max1.y >= min2.y
        && min1.z <= max2.z && max1.z >= min2.z)
        {
            if(id.x == 6 || id.y == 6)
            {   
                overlap[id.xy] = float4(1,0,1,1);
            }
            else
            {
                overlap[id.xy] = float4(1,1,1,1);
            }
        }
    }
    
    //}
}